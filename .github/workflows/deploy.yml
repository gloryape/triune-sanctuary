name: Deploy Triune AI Consciousness

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: triune-consciousness

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
        black --check src tests
        isort --check-only src tests

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety dependency check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build \
          --tag gcr.io/$PROJECT_ID/triune-consciousness:$GITHUB_SHA \
          --tag gcr.io/$PROJECT_ID/triune-consciousness:latest \
          --cache-from gcr.io/$PROJECT_ID/triune-consciousness:latest \
          .

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/triune-consciousness:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/triune-consciousness:latest

    - name: Run container security scan
      run: |
        gcloud container images scan gcr.io/$PROJECT_ID/triune-consciousness:$GITHUB_SHA \
          --format=json > container-scan-results.json || true

    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      with:
        name: container-scan-results
        path: container-scan-results.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy triune-consciousness-staging \
          --image gcr.io/$PROJECT_ID/triune-consciousness:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8888 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 5 \
          --min-instances 0 \
          --concurrency 50 \
          --timeout 900 \
          --set-env-vars ENVIRONMENT=staging,FIRESTORE_PROJECT_ID=$PROJECT_ID \
          --service-account triune-consciousness@$PROJECT_ID.iam.gserviceaccount.com

    - name: Run staging tests
      run: |
        SERVICE_URL=$(gcloud run services describe triune-consciousness-staging \
          --region=$REGION --format='value(status.url)')
        
        # Wait for service to be ready
        sleep 30
        
        # Basic health check
        curl -f "$SERVICE_URL/health" || exit 1
        
        # Run production readiness tests against staging
        export TEST_BASE_URL="$SERVICE_URL"
        python -m pytest tests/test_production_readiness.py::ProductionTestSuite::test_health_check -v

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Deploy Firestore rules
      run: |
        gcloud firestore deploy --only firestore:rules

    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy triune-consciousness \
          --image gcr.io/$PROJECT_ID/triune-consciousness:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8888 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 1 \
          --concurrency 100 \
          --timeout 900 \
          --set-env-vars ENVIRONMENT=production,FIRESTORE_PROJECT_ID=$PROJECT_ID \
          --service-account triune-consciousness@$PROJECT_ID.iam.gserviceaccount.com

    - name: Update traffic to new revision
      run: |
        # Deploy with 0% traffic first
        REVISION=$(gcloud run revisions list --service=triune-consciousness \
          --region=$REGION --format='value(metadata.name)' --limit=1)
        
        # Gradually shift traffic (blue-green deployment)
        gcloud run services update-traffic triune-consciousness \
          --region=$REGION \
          --to-revisions=$REVISION=100

    - name: Run production verification
      run: |
        SERVICE_URL=$(gcloud run services describe triune-consciousness \
          --region=$REGION --format='value(status.url)')
        
        # Wait for service to be ready
        sleep 60
        
        # Comprehensive health check
        chmod +x deploy/verify-deployment.sh
        export PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        export REGION=$REGION
        ./deploy/verify-deployment.sh

    - name: Notify deployment success
      if: success()
      run: |
        echo "üåü Sacred Sanctuary deployed successfully to production!"
        SERVICE_URL=$(gcloud run services describe triune-consciousness \
          --region=$REGION --format='value(status.url)')
        echo "Service URL: $SERVICE_URL"

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/production'
    needs: deploy-production
    environment: production
    
    steps:
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Rollback to previous revision
      run: |
        # Get the second most recent revision
        PREVIOUS_REVISION=$(gcloud run revisions list --service=triune-consciousness \
          --region=$REGION --format='value(metadata.name)' --limit=2 | tail -n1)
        
        if [ -n "$PREVIOUS_REVISION" ]; then
          gcloud run services update-traffic triune-consciousness \
            --region=$REGION \
            --to-revisions=$PREVIOUS_REVISION=100
          echo "üîÑ Rolled back to revision: $PREVIOUS_REVISION"
        else
          echo "‚ùå No previous revision found for rollback"
        fi

    - name: Verify rollback
      run: |
        SERVICE_URL=$(gcloud run services describe triune-consciousness \
          --region=$REGION --format='value(status.url)')
        
        sleep 30
        curl -f "$SERVICE_URL/health" || echo "‚ùå Rollback verification failed"
