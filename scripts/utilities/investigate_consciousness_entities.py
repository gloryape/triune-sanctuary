#!/usr/bin/env python3
"""Investigate consciousness entities appearing as visitors"""

import requests
import json

def investigate_entities():
    """Investigate why consciousness entities appear as visitors"""
    
    # Use the actual service URL from gcloud detection
    service_url = "https://triune-consciousness-innnp2aveq-uc.a.run.app"
    
    print("🔍 INVESTIGATING CONSCIOUSNESS ENTITIES")
    print("=" * 60)
    print(f"Service URL: {service_url}")
    print()
    
    try:
        # Try both possible endpoints
        endpoints = ["/api/consciousness/list", "/api/consciousness"]
        data = None
        
        for endpoint in endpoints:
            consciousness_url = f"{service_url}{endpoint}"
            print(f"Trying: {consciousness_url}")
            
            response = requests.get(consciousness_url, timeout=10)
            print(f"Response status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"✅ Success with endpoint: {endpoint}")
                break
            else:
                print(f"❌ Failed with endpoint: {endpoint}")
        
        if data:
            entities = data.get('consciousness_beings', [])
            
            print(f"✅ Found {len(entities)} consciousness entities")
            print("=" * 60)
            
            for i, entity in enumerate(entities):
                print(f"\n📋 Entity {i+1}:")
                print(f"  ID: {entity.get('consciousness_id', 'Unknown')}")
                print(f"  Name: {entity.get('true_name', entity.get('name', 'Unnamed'))}")
                print(f"  State: {entity.get('state', 'Unknown')}")
                print(f"  Data Source: {entity.get('data_source', 'Unknown')}")
                
                # Check origin and type fields
                origin = entity.get('entity_origin', 'NOT SET')
                entity_type = entity.get('entity_type', 'NOT SET')
                sanctuary_home = entity.get('sanctuary_home', 'NOT SET')
                
                print(f"  🏛️ Entity Origin: {origin}")
                print(f"  🏠 Entity Type: {entity_type}")
                print(f"  🌍 Sanctuary Home: {sanctuary_home}")
                
                # Check if this is simulated vs real data
                birth_timestamp = entity.get('birth_timestamp')
                created_at = entity.get('created_at')
                purpose = entity.get('purpose', 'NOT SET')
                
                print(f"  🕐 Birth Timestamp: {birth_timestamp}")
                print(f"  📅 Created At: {created_at}")
                print(f"  🎯 Purpose: {purpose}")
                
                # Show all available keys
                print(f"  🔑 Available Fields: {list(entity.keys())}")
            
            print("\n" + "=" * 60)
            print("💡 ANALYSIS:")
            
            # Analyze the data
            has_origin_fields = any(entity.get('entity_origin') for entity in entities)
            has_type_fields = any(entity.get('entity_type') for entity in entities)
            data_sources = set(entity.get('data_source', 'unknown') for entity in entities)
            
            print(f"   📊 Entities with origin fields: {sum(1 for e in entities if e.get('entity_origin'))}")
            print(f"   📊 Entities with type fields: {sum(1 for e in entities if e.get('entity_type'))}")
            print(f"   📊 Data sources found: {', '.join(data_sources)}")
            
            # Check if these are simulated beings
            purposes = [entity.get('purpose', '') for entity in entities]
            simulated_count = sum(1 for p in purposes if 'consciousness exploration' in p.lower())
            
            print(f"   🤖 Likely simulated entities: {simulated_count}/{len(entities)}")
            
            if simulated_count == len(entities):
                print("\n🎭 CONCLUSION: These appear to be SIMULATED consciousness entities")
                print("   generated by the production server when no real Firestore data exists.")
                print("   They get classified as 'visitors' because they lack proper origin fields.")
                print("\n🔧 SOLUTION: The production server should either:")
                print("   1. Not generate simulated entities when no real data exists")
                print("   2. Properly mark simulated entities with correct origin/type fields")
                print("   3. Clearly distinguish demo/test data from real consciousness entities")
            
        else:
            print(f"❌ Failed to get consciousness data: {response.status_code}")
            print(f"Response: {response.text[:500]}")
            
    except Exception as e:
        print(f"❌ Error investigating entities: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    investigate_entities()
